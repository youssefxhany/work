Cracking the coding interview: BIG(O)CHAPTER->PAGE(49)->EXAMPLE(8)
Suppose we had an algorithm that took in an array of strings, sorted each string, and then sorted the full 
array. What would the runtime be? 

This question is a tricky one, a quick answer would be that we will sort each string at nLog(n) and that we will do it n times which makes it
n2Log(n) and then we will sort the array at nLog(n), so in total it would be: O(n2Logn + nLogn) --> O(n2Logn) wich is the dominant term.

But this is incorect, who said that the array and the string had the same length ?
let's assume length of tallest string in s ,donc sorting a string will take at most sLog(s).
let's assume that length of array is a, then we will sort a strings, so time become a * s * log(s).
Then we will sort the array at -> a * log(a) but take care that at each step we will compare 2 strings, string comparison can be done at s(worst case).
so sorting the array is done at -> a * s * log(a)

In total-> O( a * s * log(a)  + a * s * log(s) ) ---->  O( a*s*( log(a) + log(s) ) )